{"version":3,"file":"component---src-pages-climate-change-graphs-food-js-bae9a668672e33f160ed.js","mappings":"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","sources":["webpack://personal-website/./node_modules/d3-dsv/src/dsv.js","webpack://personal-website/./node_modules/d3-dsv/src/csv.js","webpack://personal-website/./node_modules/d3-dsv/src/tsv.js","webpack://personal-website/./node_modules/d3-fetch/src/dsv.js","webpack://personal-website/./node_modules/d3-fetch/src/text.js","webpack://personal-website/./src/pages/climate-change/graphs/food.js"],"sourcesContent":["var EOL = {},\n    EOF = {},\n    QUOTE = 34,\n    NEWLINE = 10,\n    RETURN = 13;\n\nfunction objectConverter(columns) {\n  return new Function(\"d\", \"return {\" + columns.map(function(name, i) {\n    return JSON.stringify(name) + \": d[\" + i + \"] || \\\"\\\"\";\n  }).join(\",\") + \"}\");\n}\n\nfunction customConverter(columns, f) {\n  var object = objectConverter(columns);\n  return function(row, i) {\n    return f(object(row), i, columns);\n  };\n}\n\n// Compute unique columns in order of discovery.\nfunction inferColumns(rows) {\n  var columnSet = Object.create(null),\n      columns = [];\n\n  rows.forEach(function(row) {\n    for (var column in row) {\n      if (!(column in columnSet)) {\n        columns.push(columnSet[column] = column);\n      }\n    }\n  });\n\n  return columns;\n}\n\nfunction pad(value, width) {\n  var s = value + \"\", length = s.length;\n  return length < width ? new Array(width - length + 1).join(0) + s : s;\n}\n\nfunction formatYear(year) {\n  return year < 0 ? \"-\" + pad(-year, 6)\n    : year > 9999 ? \"+\" + pad(year, 6)\n    : pad(year, 4);\n}\n\nfunction formatDate(date) {\n  var hours = date.getUTCHours(),\n      minutes = date.getUTCMinutes(),\n      seconds = date.getUTCSeconds(),\n      milliseconds = date.getUTCMilliseconds();\n  return isNaN(date) ? \"Invalid Date\"\n      : formatYear(date.getUTCFullYear(), 4) + \"-\" + pad(date.getUTCMonth() + 1, 2) + \"-\" + pad(date.getUTCDate(), 2)\n      + (milliseconds ? \"T\" + pad(hours, 2) + \":\" + pad(minutes, 2) + \":\" + pad(seconds, 2) + \".\" + pad(milliseconds, 3) + \"Z\"\n      : seconds ? \"T\" + pad(hours, 2) + \":\" + pad(minutes, 2) + \":\" + pad(seconds, 2) + \"Z\"\n      : minutes || hours ? \"T\" + pad(hours, 2) + \":\" + pad(minutes, 2) + \"Z\"\n      : \"\");\n}\n\nexport default function(delimiter) {\n  var reFormat = new RegExp(\"[\\\"\" + delimiter + \"\\n\\r]\"),\n      DELIMITER = delimiter.charCodeAt(0);\n\n  function parse(text, f) {\n    var convert, columns, rows = parseRows(text, function(row, i) {\n      if (convert) return convert(row, i - 1);\n      columns = row, convert = f ? customConverter(row, f) : objectConverter(row);\n    });\n    rows.columns = columns || [];\n    return rows;\n  }\n\n  function parseRows(text, f) {\n    var rows = [], // output rows\n        N = text.length,\n        I = 0, // current character index\n        n = 0, // current line number\n        t, // current token\n        eof = N <= 0, // current token followed by EOF?\n        eol = false; // current token followed by EOL?\n\n    // Strip the trailing newline.\n    if (text.charCodeAt(N - 1) === NEWLINE) --N;\n    if (text.charCodeAt(N - 1) === RETURN) --N;\n\n    function token() {\n      if (eof) return EOF;\n      if (eol) return eol = false, EOL;\n\n      // Unescape quotes.\n      var i, j = I, c;\n      if (text.charCodeAt(j) === QUOTE) {\n        while (I++ < N && text.charCodeAt(I) !== QUOTE || text.charCodeAt(++I) === QUOTE);\n        if ((i = I) >= N) eof = true;\n        else if ((c = text.charCodeAt(I++)) === NEWLINE) eol = true;\n        else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }\n        return text.slice(j + 1, i - 1).replace(/\"\"/g, \"\\\"\");\n      }\n\n      // Find next delimiter or newline.\n      while (I < N) {\n        if ((c = text.charCodeAt(i = I++)) === NEWLINE) eol = true;\n        else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }\n        else if (c !== DELIMITER) continue;\n        return text.slice(j, i);\n      }\n\n      // Return last token before EOF.\n      return eof = true, text.slice(j, N);\n    }\n\n    while ((t = token()) !== EOF) {\n      var row = [];\n      while (t !== EOL && t !== EOF) row.push(t), t = token();\n      if (f && (row = f(row, n++)) == null) continue;\n      rows.push(row);\n    }\n\n    return rows;\n  }\n\n  function preformatBody(rows, columns) {\n    return rows.map(function(row) {\n      return columns.map(function(column) {\n        return formatValue(row[column]);\n      }).join(delimiter);\n    });\n  }\n\n  function format(rows, columns) {\n    if (columns == null) columns = inferColumns(rows);\n    return [columns.map(formatValue).join(delimiter)].concat(preformatBody(rows, columns)).join(\"\\n\");\n  }\n\n  function formatBody(rows, columns) {\n    if (columns == null) columns = inferColumns(rows);\n    return preformatBody(rows, columns).join(\"\\n\");\n  }\n\n  function formatRows(rows) {\n    return rows.map(formatRow).join(\"\\n\");\n  }\n\n  function formatRow(row) {\n    return row.map(formatValue).join(delimiter);\n  }\n\n  function formatValue(value) {\n    return value == null ? \"\"\n        : value instanceof Date ? formatDate(value)\n        : reFormat.test(value += \"\") ? \"\\\"\" + value.replace(/\"/g, \"\\\"\\\"\") + \"\\\"\"\n        : value;\n  }\n\n  return {\n    parse: parse,\n    parseRows: parseRows,\n    format: format,\n    formatBody: formatBody,\n    formatRows: formatRows,\n    formatRow: formatRow,\n    formatValue: formatValue\n  };\n}\n","import dsv from \"./dsv.js\";\n\nvar csv = dsv(\",\");\n\nexport var csvParse = csv.parse;\nexport var csvParseRows = csv.parseRows;\nexport var csvFormat = csv.format;\nexport var csvFormatBody = csv.formatBody;\nexport var csvFormatRows = csv.formatRows;\nexport var csvFormatRow = csv.formatRow;\nexport var csvFormatValue = csv.formatValue;\n","import dsv from \"./dsv.js\";\n\nvar tsv = dsv(\"\\t\");\n\nexport var tsvParse = tsv.parse;\nexport var tsvParseRows = tsv.parseRows;\nexport var tsvFormat = tsv.format;\nexport var tsvFormatBody = tsv.formatBody;\nexport var tsvFormatRows = tsv.formatRows;\nexport var tsvFormatRow = tsv.formatRow;\nexport var tsvFormatValue = tsv.formatValue;\n","import {csvParse, dsvFormat, tsvParse} from \"d3-dsv\";\nimport text from \"./text.js\";\n\nfunction dsvParse(parse) {\n  return function(input, init, row) {\n    if (arguments.length === 2 && typeof init === \"function\") row = init, init = undefined;\n    return text(input, init).then(function(response) {\n      return parse(response, row);\n    });\n  };\n}\n\nexport default function dsv(delimiter, input, init, row) {\n  if (arguments.length === 3 && typeof init === \"function\") row = init, init = undefined;\n  var format = dsvFormat(delimiter);\n  return text(input, init).then(function(response) {\n    return format.parse(response, row);\n  });\n}\n\nexport var csv = dsvParse(csvParse);\nexport var tsv = dsvParse(tsvParse);\n","function responseText(response) {\n  if (!response.ok) throw new Error(response.status + \" \" + response.statusText);\n  return response.text();\n}\n\nexport default function(input, init) {\n  return fetch(input, init).then(responseText);\n}\n","import React, { useState, useEffect } from 'react';\nimport ReactEcharts from 'echarts-for-react';\nimport * as echarts from 'echarts';\nimport * as d3 from 'd3-fetch';\nimport styled from 'styled-components';\n\nimport { Link } from 'gatsby';\nimport { initialOption } from './common';\n\nconst Graph = styled.div`\n   width: 100%;\n    box-sizing: border-box;\n    margin-right: auto;\n    margin-left: auto;\n    padding-top: 1.5em;\n    padding-bottom: 1.5em;\n`;\n\nconst Source = styled.div`\n  font-size: small;\n`;\n\nconst GraphTitle = styled.div`\n  font-weight: bold;\n`;\n\nconst GraphDescription = styled.div`\n`;\n\nconst mapping = {\n  'Beef (beef herd)': '🐮 beef',\n  'Lamb & Mutton': '🐑 lamb & mutton',\n  'Shrimps (farmed)': '🍤 shrimp',\n  'Pig Meat': '🐷 pork',\n  'Poultry Meat': '🐔 chicken',\n  'Fish (farmed)': '🐟 fish',\n  'Rice': '🍚 rice',\n  'Potatoes': '🥔 potatoes',\n  'Tomatoes': '🍅 tomatoes',\n  'Root Vegetables': '🥕 vegetables',\n  'Wheat & Rye (Bread)': '🍞 bread & cereals',\n  'Coffee': '☕️ coffee',\n  'Milk': '🥛 milk',\n  'Soymilk': '🥛 soymilk',\n  'Eggs': '🥚 eggs',\n  'Cheese': '🧀 cheese',\n  'Dark Chocolate': '🍫 chocolate',\n  'Berries & Grapes': '🍇 berries & grapes',\n  'Apples': '🍏 apples',\n  'Bananas': '🍌 bananas',\n};\n\nconst series = {\n  'productionIntensity': 'production',\n  'packagingAndRetailIntensity': 'packaging & retail',\n  'transportIntensity': 'transport',\n};\n\nconst Food = () => {\n  const [option, updateOption] = useState(initialOption());\n\n  const loadData = () => {\n    d3.csv('/data/GHG-emissions-by-life-cycle-stage-OurWorldinData-upload.csv').then((response) => {\n      const data = Object.keys(mapping)\n        .map(d => response.find(x => x['Food product'] === d))\n        .reverse()\n        .map(d => ({\n          name: d['Food product'],\n          transportIntensity: parseFloat(d['Transport']),\n          packagingAndRetailIntensity: [\n            'Packging', // this is not a typo!\n            'Retail',\n          ].map(k => parseFloat(d[k])).reduce((a, b) => a + b, 0),\n          productionIntensity: [\n            'Land use change',\n            'Animal Feed',\n            'Farm',\n            'Processing',\n          ].map(k => parseFloat(d[k])).reduce((a, b) => a + b, 0),\n          intensity: [\n            'Land use change',\n            'Animal Feed',\n            'Farm',\n            'Processing',\n            'Transport',\n            'Packging', // this is not a typo!\n            'Retail',\n          ].map(k => parseFloat(d[k])).reduce((a, b) => a + b, 0),\n          label: mapping[d['Food product']] || d['Food product'],\n        }));\n\n      const newOption = initialOption();\n\n      newOption.grid.left = 160;\n\n      newOption.xAxis.name = 'Greenhouse gas intensity in kgCO₂eq per kg';\n      newOption.xAxis.nameLocation = 'middle';\n      newOption.xAxis.nameGap = 30;\n      newOption.grid.bottom = 50 + 30; // second component is legend\n\n      newOption.xAxis.type = 'value';\n      newOption.yAxis.data = data.map(d => d.label || d.name);\n\n      newOption.tooltip.trigger = 'none';\n\n      newOption.legend = {\n        data: Object.values(series),\n        bottom: 0,\n      };\n\n      newOption.series = Object.keys(series).map((k, i) => (\n        {\n          type: 'bar',\n          stack: true,\n          name: series[k],\n          data: echarts.util.map(data, d => ({\n            value: d[k],\n            itemStyle: {\n              normal: {\n                // color: modeColor[d.name],\n              },\n            },\n          })),\n          label: {\n            normal: {\n              show: i === Object.keys(series).length - 1,\n              position: 'right',\n              formatter(e) {\n                return Math.ceil(data[e.dataIndex].intensity);\n              },\n            },\n          },\n        }\n      ));\n      updateOption(newOption);\n    });\n  };\n\n  useEffect(() => {\n    loadData();\n  }, []);\n\n  return (\n    <Graph>\n      <GraphTitle>Greenhouse gas intensity of food</GraphTitle>\n      <GraphDescription>\n        in kgCO\n        <sub>2</sub>\n        eq / kg\n      </GraphDescription>\n      <ReactEcharts\n        option={option}\n        notMerge\n        style={{ height: '500px' }}\n      />\n      <Source>\n        Source:\n        {' '}\n        <Link outward href=\"https://ourworldindata.org/food-choice-vs-eating-local\">Our World in Data</Link>\n        .\n      </Source>\n    </Graph>\n  );\n};\n\nexport default Food;\n"],"names":["EOL","EOF","QUOTE","NEWLINE","RETURN","objectConverter","columns","Function","map","name","i","JSON","stringify","join","inferColumns","rows","columnSet","Object","create","forEach","row","column","push","pad","value","width","s","length","Array","formatDate","date","year","hours","getUTCHours","minutes","getUTCMinutes","seconds","getUTCSeconds","milliseconds","getUTCMilliseconds","isNaN","getUTCFullYear","getUTCMonth","getUTCDate","delimiter","reFormat","RegExp","DELIMITER","charCodeAt","parseRows","text","f","t","N","I","n","eof","eol","token","c","j","slice","replace","preformatBody","formatValue","formatRow","Date","test","parse","convert","object","customConverter","format","concat","formatBody","formatRows","csv","dsv","csvParse","tsv","tsvParse","dsvParse","input","init","arguments","undefined","then","response","responseText","ok","Error","status","statusText","fetch","Graph","styled","div","withConfig","displayName","componentId","Source","GraphTitle","GraphDescription","mapping","series","Food","option","updateOption","useState","initialOption","useEffect","d3","data","keys","d","find","x","reverse","transportIntensity","parseFloat","packagingAndRetailIntensity","k","reduce","a","b","productionIntensity","intensity","label","newOption","grid","left","xAxis","nameLocation","nameGap","bottom","type","yAxis","tooltip","trigger","legend","values","stack","echarts","itemStyle","normal","show","position","formatter","e","Math","ceil","dataIndex","React","ReactEcharts","notMerge","style","height","Link","outward","href"],"sourceRoot":""}