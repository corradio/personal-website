{"version":3,"sources":["webpack:///./src/pages/climate-change/graphs/food.js","webpack:///./node_modules/d3-fetch/src/text.js","webpack:///./node_modules/d3-dsv/src/csv.js","webpack:///./node_modules/d3-dsv/src/tsv.js","webpack:///./node_modules/d3-fetch/src/dsv.js","webpack:///./node_modules/d3-dsv/src/dsv.js"],"names":["Graph","styled","div","Source","GraphTitle","GraphDescription","mapping","series","Food","useState","initialOption","option","updateOption","useEffect","d3","then","response","data","Object","keys","map","d","find","x","reverse","name","transportIntensity","parseFloat","packagingAndRetailIntensity","k","reduce","a","b","productionIntensity","intensity","label","newOption","grid","left","xAxis","nameLocation","nameGap","bottom","type","yAxis","tooltip","trigger","legend","values","i","stack","echarts","value","itemStyle","normal","show","length","position","formatter","e","Math","ceil","dataIndex","notMerge","style","height","outward","href","responseText","ok","Error","status","statusText","text","fetch","input","init","csv","dsv","csvParse","parse","tsv","parseRows","format","formatBody","formatRows","formatRow","formatValue","tsvParse","dsvParse","row","arguments","undefined","EOL","EOF","objectConverter","columns","Function","JSON","stringify","join","inferColumns","rows","columnSet","create","forEach","column","push","pad","width","s","Array","formatDate","date","year","hours","getUTCHours","minutes","getUTCMinutes","seconds","getUTCSeconds","milliseconds","getUTCMilliseconds","isNaN","getUTCFullYear","getUTCMonth","getUTCDate","reFormat","RegExp","delimiter","DELIMITER","charCodeAt","f","t","N","I","n","eof","eol","token","c","j","slice","replace","preformatBody","Date","test","convert","object","customConverter","concat"],"mappings":"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","file":"component---src-pages-climate-change-graphs-food-js-85379f6384c78cd06c66.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport ReactEcharts from 'echarts-for-react';\nimport * as echarts from 'echarts';\nimport * as d3 from 'd3-fetch';\nimport styled from 'styled-components';\n\nimport { Link } from 'gatsby';\nimport { initialOption } from './common';\n\nconst Graph = styled.div`\n   width: 100%;\n    box-sizing: border-box;\n    margin-right: auto;\n    margin-left: auto;\n    padding-top: 1.5em;\n    padding-bottom: 1.5em;\n`;\n\nconst Source = styled.div`\n  font-size: small;\n`;\n\nconst GraphTitle = styled.div`\n  font-weight: bold;\n`;\n\nconst GraphDescription = styled.div`\n`;\n\nconst mapping = {\n  'Beef (beef herd)': '🐮 beef',\n  'Lamb & Mutton': '🐑 lamb & mutton',\n  'Shrimps (farmed)': '🍤 shrimp',\n  'Pig Meat': '🐷 pork',\n  'Poultry Meat': '🐔 chicken',\n  'Fish (farmed)': '🐟 fish',\n  'Rice': '🍚 rice',\n  'Potatoes': '🥔 potatoes',\n  'Tomatoes': '🍅 tomatoes',\n  'Root Vegetables': '🥕 vegetables',\n  'Wheat & Rye (Bread)': '🍞 bread & cereals',\n  'Coffee': '☕️ coffee',\n  'Milk': '🥛 milk',\n  'Soymilk': '🥛 soymilk',\n  'Eggs': '🥚 eggs',\n  'Cheese': '🧀 cheese',\n  'Dark Chocolate': '🍫 chocolate',\n  'Berries & Grapes': '🍇 berries & grapes',\n  'Apples': '🍏 apples',\n  'Bananas': '🍌 bananas',\n};\n\nconst series = {\n  'productionIntensity': 'production',\n  'packagingAndRetailIntensity': 'packaging & retail',\n  'transportIntensity': 'transport',\n};\n\nconst Food = () => {\n  const [option, updateOption] = useState(initialOption());\n\n  const loadData = () => {\n    d3.csv('/data/GHG-emissions-by-life-cycle-stage-OurWorldinData-upload.csv').then((response) => {\n      const data = Object.keys(mapping)\n        .map(d => response.find(x => x['Food product'] === d))\n        .reverse()\n        .map(d => ({\n          name: d['Food product'],\n          transportIntensity: parseFloat(d['Transport']),\n          packagingAndRetailIntensity: [\n            'Packging', // this is not a typo!\n            'Retail',\n          ].map(k => parseFloat(d[k])).reduce((a, b) => a + b, 0),\n          productionIntensity: [\n            'Land use change',\n            'Animal Feed',\n            'Farm',\n            'Processing',\n          ].map(k => parseFloat(d[k])).reduce((a, b) => a + b, 0),\n          intensity: [\n            'Land use change',\n            'Animal Feed',\n            'Farm',\n            'Processing',\n            'Transport',\n            'Packging', // this is not a typo!\n            'Retail',\n          ].map(k => parseFloat(d[k])).reduce((a, b) => a + b, 0),\n          label: mapping[d['Food product']] || d['Food product'],\n        }));\n\n      const newOption = initialOption();\n\n      newOption.grid.left = 160;\n\n      newOption.xAxis.name = 'Greenhouse gas intensity in kgCO₂eq per kg';\n      newOption.xAxis.nameLocation = 'middle';\n      newOption.xAxis.nameGap = 30;\n      newOption.grid.bottom = 50 + 30; // second component is legend\n\n      newOption.xAxis.type = 'value';\n      newOption.yAxis.data = data.map(d => d.label || d.name);\n\n      newOption.tooltip.trigger = 'none';\n\n      newOption.legend = {\n        data: Object.values(series),\n        bottom: 0,\n      };\n\n      newOption.series = Object.keys(series).map((k, i) => (\n        {\n          type: 'bar',\n          stack: true,\n          name: series[k],\n          data: echarts.util.map(data, d => ({\n            value: d[k],\n            itemStyle: {\n              normal: {\n                // color: modeColor[d.name],\n              },\n            },\n          })),\n          label: {\n            normal: {\n              show: i === Object.keys(series).length - 1,\n              position: 'right',\n              formatter(e) {\n                return Math.ceil(data[e.dataIndex].intensity);\n              },\n            },\n          },\n        }\n      ));\n      updateOption(newOption);\n    });\n  };\n\n  useEffect(() => {\n    loadData();\n  }, []);\n\n  return (\n    <Graph>\n      <GraphTitle>Greenhouse gas intensity of food</GraphTitle>\n      <GraphDescription>\n        in kgCO\n        <sub>2</sub>\n        eq / kg\n      </GraphDescription>\n      <ReactEcharts\n        option={option}\n        notMerge\n        style={{ height: '500px' }}\n      />\n      <Source>\n        Source:\n        {' '}\n        <Link outward href=\"https://ourworldindata.org/food-choice-vs-eating-local\">Our World in Data</Link>\n        .\n      </Source>\n    </Graph>\n  );\n};\n\nexport default Food;\n","function responseText(response) {\n  if (!response.ok) throw new Error(response.status + \" \" + response.statusText);\n  return response.text();\n}\n\nexport default function (input, init) {\n  return fetch(input, init).then(responseText);\n}","import dsv from \"./dsv.js\";\nvar csv = dsv(\",\");\nexport var csvParse = csv.parse;\nexport var csvParseRows = csv.parseRows;\nexport var csvFormat = csv.format;\nexport var csvFormatBody = csv.formatBody;\nexport var csvFormatRows = csv.formatRows;\nexport var csvFormatRow = csv.formatRow;\nexport var csvFormatValue = csv.formatValue;","import dsv from \"./dsv.js\";\nvar tsv = dsv(\"\\t\");\nexport var tsvParse = tsv.parse;\nexport var tsvParseRows = tsv.parseRows;\nexport var tsvFormat = tsv.format;\nexport var tsvFormatBody = tsv.formatBody;\nexport var tsvFormatRows = tsv.formatRows;\nexport var tsvFormatRow = tsv.formatRow;\nexport var tsvFormatValue = tsv.formatValue;","import { csvParse, dsvFormat, tsvParse } from \"d3-dsv\";\nimport text from \"./text.js\";\n\nfunction dsvParse(parse) {\n  return function (input, init, row) {\n    if (arguments.length === 2 && typeof init === \"function\") row = init, init = undefined;\n    return text(input, init).then(function (response) {\n      return parse(response, row);\n    });\n  };\n}\n\nexport default function dsv(delimiter, input, init, row) {\n  if (arguments.length === 3 && typeof init === \"function\") row = init, init = undefined;\n  var format = dsvFormat(delimiter);\n  return text(input, init).then(function (response) {\n    return format.parse(response, row);\n  });\n}\nexport var csv = dsvParse(csvParse);\nexport var tsv = dsvParse(tsvParse);","var EOL = {},\n    EOF = {},\n    QUOTE = 34,\n    NEWLINE = 10,\n    RETURN = 13;\n\nfunction objectConverter(columns) {\n  return new Function(\"d\", \"return {\" + columns.map(function (name, i) {\n    return JSON.stringify(name) + \": d[\" + i + \"] || \\\"\\\"\";\n  }).join(\",\") + \"}\");\n}\n\nfunction customConverter(columns, f) {\n  var object = objectConverter(columns);\n  return function (row, i) {\n    return f(object(row), i, columns);\n  };\n} // Compute unique columns in order of discovery.\n\n\nfunction inferColumns(rows) {\n  var columnSet = Object.create(null),\n      columns = [];\n  rows.forEach(function (row) {\n    for (var column in row) {\n      if (!(column in columnSet)) {\n        columns.push(columnSet[column] = column);\n      }\n    }\n  });\n  return columns;\n}\n\nfunction pad(value, width) {\n  var s = value + \"\",\n      length = s.length;\n  return length < width ? new Array(width - length + 1).join(0) + s : s;\n}\n\nfunction formatYear(year) {\n  return year < 0 ? \"-\" + pad(-year, 6) : year > 9999 ? \"+\" + pad(year, 6) : pad(year, 4);\n}\n\nfunction formatDate(date) {\n  var hours = date.getUTCHours(),\n      minutes = date.getUTCMinutes(),\n      seconds = date.getUTCSeconds(),\n      milliseconds = date.getUTCMilliseconds();\n  return isNaN(date) ? \"Invalid Date\" : formatYear(date.getUTCFullYear(), 4) + \"-\" + pad(date.getUTCMonth() + 1, 2) + \"-\" + pad(date.getUTCDate(), 2) + (milliseconds ? \"T\" + pad(hours, 2) + \":\" + pad(minutes, 2) + \":\" + pad(seconds, 2) + \".\" + pad(milliseconds, 3) + \"Z\" : seconds ? \"T\" + pad(hours, 2) + \":\" + pad(minutes, 2) + \":\" + pad(seconds, 2) + \"Z\" : minutes || hours ? \"T\" + pad(hours, 2) + \":\" + pad(minutes, 2) + \"Z\" : \"\");\n}\n\nexport default function (delimiter) {\n  var reFormat = new RegExp(\"[\\\"\" + delimiter + \"\\n\\r]\"),\n      DELIMITER = delimiter.charCodeAt(0);\n\n  function parse(text, f) {\n    var convert,\n        columns,\n        rows = parseRows(text, function (row, i) {\n      if (convert) return convert(row, i - 1);\n      columns = row, convert = f ? customConverter(row, f) : objectConverter(row);\n    });\n    rows.columns = columns || [];\n    return rows;\n  }\n\n  function parseRows(text, f) {\n    var rows = [],\n        // output rows\n    N = text.length,\n        I = 0,\n        // current character index\n    n = 0,\n        // current line number\n    t,\n        // current token\n    eof = N <= 0,\n        // current token followed by EOF?\n    eol = false; // current token followed by EOL?\n    // Strip the trailing newline.\n\n    if (text.charCodeAt(N - 1) === NEWLINE) --N;\n    if (text.charCodeAt(N - 1) === RETURN) --N;\n\n    function token() {\n      if (eof) return EOF;\n      if (eol) return eol = false, EOL; // Unescape quotes.\n\n      var i,\n          j = I,\n          c;\n\n      if (text.charCodeAt(j) === QUOTE) {\n        while (I++ < N && text.charCodeAt(I) !== QUOTE || text.charCodeAt(++I) === QUOTE) {\n          ;\n        }\n\n        if ((i = I) >= N) eof = true;else if ((c = text.charCodeAt(I++)) === NEWLINE) eol = true;else if (c === RETURN) {\n          eol = true;\n          if (text.charCodeAt(I) === NEWLINE) ++I;\n        }\n        return text.slice(j + 1, i - 1).replace(/\"\"/g, \"\\\"\");\n      } // Find next delimiter or newline.\n\n\n      while (I < N) {\n        if ((c = text.charCodeAt(i = I++)) === NEWLINE) eol = true;else if (c === RETURN) {\n          eol = true;\n          if (text.charCodeAt(I) === NEWLINE) ++I;\n        } else if (c !== DELIMITER) continue;\n        return text.slice(j, i);\n      } // Return last token before EOF.\n\n\n      return eof = true, text.slice(j, N);\n    }\n\n    while ((t = token()) !== EOF) {\n      var row = [];\n\n      while (t !== EOL && t !== EOF) {\n        row.push(t), t = token();\n      }\n\n      if (f && (row = f(row, n++)) == null) continue;\n      rows.push(row);\n    }\n\n    return rows;\n  }\n\n  function preformatBody(rows, columns) {\n    return rows.map(function (row) {\n      return columns.map(function (column) {\n        return formatValue(row[column]);\n      }).join(delimiter);\n    });\n  }\n\n  function format(rows, columns) {\n    if (columns == null) columns = inferColumns(rows);\n    return [columns.map(formatValue).join(delimiter)].concat(preformatBody(rows, columns)).join(\"\\n\");\n  }\n\n  function formatBody(rows, columns) {\n    if (columns == null) columns = inferColumns(rows);\n    return preformatBody(rows, columns).join(\"\\n\");\n  }\n\n  function formatRows(rows) {\n    return rows.map(formatRow).join(\"\\n\");\n  }\n\n  function formatRow(row) {\n    return row.map(formatValue).join(delimiter);\n  }\n\n  function formatValue(value) {\n    return value == null ? \"\" : value instanceof Date ? formatDate(value) : reFormat.test(value += \"\") ? \"\\\"\" + value.replace(/\"/g, \"\\\"\\\"\") + \"\\\"\" : value;\n  }\n\n  return {\n    parse: parse,\n    parseRows: parseRows,\n    format: format,\n    formatBody: formatBody,\n    formatRows: formatRows,\n    formatRow: formatRow,\n    formatValue: formatValue\n  };\n}"],"sourceRoot":""}